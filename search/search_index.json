{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Case Studies","text":""},{"location":"#dannys-diner","title":"Danny's Diner","text":""},{"location":"#erd","title":"ERD","text":"Danny's Diner"},{"location":"#ddl","title":"DDL","text":""},{"location":"#members","title":"Members","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS dannys_diner.members (\n  customer_id CHAR(1) COMMENT 'Unique identifier for the customer, represented as a single character',\n  join_date TIMESTAMP COMMENT 'Date and time when the customer joined the loyalty program'\n)\nCOMMENT 'The members table captures the dates when each customer joined the beta version of the Dannys Diner loyalty program'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/dannys_diner/members/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#menu","title":"Menu","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS dannys_diner.menu (\n  product_id INT COMMENT 'Unique identifier for the product',\n  product_name STRING COMMENT 'Name of the product',\n  price DOUBLE COMMENT 'Price of the product'\n)\nCOMMENT 'The menu table maps the product IDs to the actual product names and prices'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/dannys_diner/menu/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#sales","title":"Sales","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS dannys_diner.sales (\n  customer_id CHAR(1) COMMENT 'Unique identifier for the customer, represented as a single character',\n  order_date TIMESTAMP COMMENT 'Date and time when the order was placed',\n  product_id INT COMMENT 'Unique identifier for the product purchased'\n)\nCOMMENT 'The sales table captures all customer ID level purchases with order dates and product IDs'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/dannys_diner/sales/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#data-bank","title":"Data Bank","text":""},{"location":"#erd_1","title":"ERD","text":"Data Bank"},{"location":"#ddl_1","title":"DDL","text":""},{"location":"#region","title":"Region","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS data_bank.regions (\n  region_id INT COMMENT 'Unique identifier for the region',\n  region_name VARCHAR(9) COMMENT 'Name of the region, up to 9 characters'\n)\nCOMMENT 'The region table contains the region IDs and names'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/data_bank/regions/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#customer-nodes","title":"Customer Nodes","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS data_bank.customer_nodes (\n  customer_id INT COMMENT 'Unique identifier for the customer',\n  region_id INT COMMENT 'Unique identifier for the region',\n  node_id INT COMMENT 'Unique identifier for the node within the region',\n  start_date TIMESTAMP COMMENT 'Date and time when the customer was assigned to the node',\n  end_date TIMESTAMP COMMENT 'Date and time when the customer was removed from the node, NULL if still active'\n)\nCOMMENT 'The customer nodes table stores the customer IDs, region IDs, node IDs, and the start and end dates that the customer was assigned to the node'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/data_bank/customer_nodes/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#customer-transactions","title":"Customer Transactions","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS data_bank.customer_transactions (\n  customer_id INT COMMENT 'Unique identifier for the customer',\n  txn_date TIMESTAMP COMMENT 'Date and time of the transaction',\n  txn_type VARCHAR(10) COMMENT 'Type of transaction: deposit, withdrawal, or purchase',\n  txn_amount DOUBLE COMMENT 'Amount involved in the transaction'\n)\nCOMMENT 'The customer transactions table stores all customer deposits, withdrawals, and purchases'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/data_bank/customer_transactions/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#trading","title":"Trading","text":""},{"location":"#erd_2","title":"ERD","text":"Daily Bitcoin Prices"},{"location":"#ddl_2","title":"DDL","text":""},{"location":"#daily-bitcoin-price","title":"Daily Bitcoin Price","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS trading.daily_btc (\n  market_date TIMESTAMP COMMENT 'Cryptocurrency markets trade daily with no holidays',\n  open_price DOUBLE COMMENT '$ USD price at the beginning of the day',\n  high_price DOUBLE COMMENT 'Intra-day highest sell price in $ USD',\n  low_price DOUBLE COMMENT 'Intra-day lowest sell price in $ USD',\n  close_price DOUBLE COMMENT '$ USD price at the end of the day',\n  adjusted_close_price DOUBLE COMMENT '$ USD price after splits and dividend distributions',\n  volume DOUBLE COMMENT 'The daily amount of traded units of cryptocurrency'\n)\nCOMMENT 'Daily Bitcoin trading data containing the open, high, low, close, adjusted close prices, and volume'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/trading/daily_btc/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#clique-bait","title":"Clique Bait","text":""},{"location":"#erd_3","title":"ERD","text":"Clique Bait"},{"location":"#ddl_3","title":"DDL","text":""},{"location":"#users","title":"Users","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS clique_bait.users (\n  user_id INT COMMENT 'Unique identifier for the user',\n  cookie_id VARCHAR(6) COMMENT 'Unique identifier for the user\u2019s browser session, represented as a cookie ID',\n  start_date TIMESTAMP COMMENT 'Date and time when the user first visited the website'\n)\nCOMMENT 'The users table stores customers who visit the Clique Bait website and their tagged cookie IDs'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/clique_bait/users/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#events","title":"Events","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS clique_bait.events (\n  visit_id VARCHAR(6) COMMENT 'Unique identifier for the visit session',\n  cookie_id VARCHAR(6) COMMENT \"Unique identifier for the user's browser session, represented as a cookie ID\",\n  page_id INT COMMENT 'Unique identifier for the page viewed during the event',\n  event_type INT COMMENT 'Type of event that occurred (e.g., page view, add to cart, purchase)',\n  sequence_number INT COMMENT 'Order of the event in the sequence of actions during the visit',\n  event_time TIMESTAMP COMMENT 'Date and time when the event occurred'\n)\nCOMMENT 'The events table captures all customers visits that are logged at the cookie ID level'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/clique_bait/events/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#event-identifier","title":"Event Identifier","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS clique_bait.event_identifier (\n  event_type INT COMMENT 'Unique identifier for the type of event',\n  event_name VARCHAR(100) COMMENT 'Name or description of the event type'\n)\nCOMMENT 'The event identifier table stores the types of events that are captured by the system'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/clique_bait/event_identifier/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#campaign-identifer","title":"Campaign Identifer","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS clique_bait.campaign_identifier (\n  campaign_id INT COMMENT 'Unique identifier for the campaign',\n  products VARCHAR(3) COMMENT 'List of products associated with the campaign, represented as a short code',\n  campaign_name VARCHAR(100) COMMENT 'Name of the campaign',\n  start_date TIMESTAMP COMMENT 'Date and time when the campaign started',\n  end_date TIMESTAMP COMMENT 'Date and time when the campaign ended'\n)\nCOMMENT 'The campaign identifier table stores the three campaigns run by Clique Bait so far'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/clique_bait/campaign_identifier/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#page-hierachy","title":"Page Hierachy","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS clique_bait.page_hierarchy (\n  page_id INT COMMENT 'Unique identifier for the page',\n  page_name VARCHAR(50) COMMENT 'Name of the page on the website',\n  product_category VARCHAR(50) COMMENT 'Category of the product featured on the page',\n  product_id INT COMMENT 'Unique identifier for the product featured on the page'\n)\nCOMMENT 'The page hierarchy table lists all pages on the Clique Bait website'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/clique_bait/page_hierarchy/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#fresh-segments","title":"Fresh Segments","text":""},{"location":"#erd_4","title":"ERD","text":"Fresh Segments"},{"location":"#ddl_4","title":"DDL","text":""},{"location":"#interest-map","title":"Interest Map","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS fresh_segments.interest_map (\n  id INT COMMENT 'Unique identifier for the interest',\n  interest_name VARCHAR(100) COMMENT 'Name of the interest',\n  interest_summary VARCHAR(500) COMMENT 'Brief summary or description of the interest',\n  created_at TIMESTAMP COMMENT 'Timestamp when the record was created',\n  last_modified TIMESTAMP COMMENT 'Timestamp when the record was last modified'\n)\nCOMMENT 'The interest map table links the interest IDs with the relevant interest names and summaries'\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/fresh_segments/interest_map/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"#interest-metrics","title":"Interest Metrics","text":"<pre><code>CREATE EXTERNAL TABLE IF NOT EXISTS fresh_segments.interest_metrics (\n  record_month INT COMMENT 'Represents the month of the record',\n  record_year INT COMMENT 'Represents the year of the record',\n  month_year VARCHAR(7) COMMENT 'Month and year concatenated as a string in the format MM-YYYY',\n  interest_id INT COMMENT 'Unique identifier for the interest',\n  composition DOUBLE COMMENT 'Represents the composition percentage of the interest (e.g., 11.89% of the client\u2019s customer list interacted with the interest)',\n  index_value DOUBLE COMMENT 'Index value indicating how much higher the composition value is compared to the average composition value for all Fresh Segments clients\u2019 customers for this interest in the same month (e.g., 6.19 means 6.19x the average)',\n  ranking INT COMMENT 'Ranking of the interest based on the index value in the given month year (e.g., 1 for the highest index value)',\n  percentile_ranking DOUBLE COMMENT 'Percentile ranking of the interest based on its index value, indicating its position relative to other interests in the same month year (e.g., 99.86 means it is in the top 0.14%)'\n)\nCOMMENT \"The interest metrics table represents the performance of specific interests based on the client's customer base\"\nSTORED AS PARQUET\nLOCATION 's3://sql-case-studies/fresh_segments/interest_metrics/'\nTBLPROPERTIES ('classification'='parquet', 'parquet.compress'='SNAPPY');\n</code></pre>"},{"location":"athena_client/","title":"Athena Client","text":"<p>               Bases: <code>object</code></p> <p>A class to interact with AWS Athena.</p>"},{"location":"athena_client/#src.athena.Athena.__init__","title":"<code>__init__(boto3_session, s3_output=None)</code>","text":"<p>Initialize the Athena instance.</p> <p>Parameters:</p> Name Type Description Default <code>boto3_session</code> <code>Session</code> <p>A boto3 session with the necessary permissions to interact with Athena.</p> required <code>s3_output</code> <code>Optional[str]</code> <p>The S3 path where the query results will be stored.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from utils import create_session # See utils module\n&gt;&gt;&gt; from athena import Athena\n&gt;&gt;&gt; boto3_session = create_session(profile_name='profile_name', role_arn='arn:aws:iam::123456789012:role/role_name')\n&gt;&gt;&gt; s3_output = 's3://bucket-name/path/to/query-results/'\n&gt;&gt;&gt; athena = Athena(boto3_session=boto3_session, s3_output=s3_output)\n</code></pre>"},{"location":"athena_client/#src.athena.Athena.create_ctas_table","title":"<code>create_ctas_table(database, query, **kwargs)</code>","text":"<p>Create a table in Athena using the Create Table As Select (CTAS) approach. Additional arguments can be passed to the CTAS  query; the most important arguments are typically:</p> <ul> <li> <p><code>ctas_table</code> Optional[str]: The name of the CTAS table. If None, a name with a random string is used.</p> </li> <li> <p><code>ctas_database</code> Optional[str]: The name of the database where the CTAS table will be created. If None, <code>database</code> is used.</p> </li> <li> <p><code>s3_coutput</code> Optional[str]: The S3 path where the CTAS table will be stored. If None, <code>s3_output</code> attribute of the current instance is used. This may not be     desirable if the CTAS table is somewhat permanent and you want to store it in a different location than the query results.</p> </li> <li> <p><code>storage_format</code> Optional[str]: The storage format for the CTAS query results, such as ORC, PARQUET, AVRO, JSON, or TEXTFILE. PARQUET by default.</p> </li> <li> <p><code>write_compression</code> Optional[str]: The compression type to use for any storage format that allows compression to be specified.</p> </li> <li> <p><code>partition_info</code> Optional[List[str]]: A list of columns by which the CTAS table will be partitioned.</p> </li> </ul> <p>See <code>awswrangler.athena.create_ctas_table</code> for more details. </p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>str</code> <p>The name of the database to create the table in.</p> required <code>query</code> <code>str</code> <p>The query to create the table without the CREATE TABLE statement.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed to <code>awswrangler.athena.create_ctas_table</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Union[str, _QueryMetadata]]</code> <p>A dictionary with the the CTAS database and table names. If wait is False, the query ID is included, otherwise a Query metadata object is added instead.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; query = '''\n&gt;&gt;&gt;         SELECT * FROM my_database.my_table\n&gt;&gt;&gt;         WHERE date &gt;= DATE '2021-01-01';\n&gt;&gt;&gt;         '''\n&gt;&gt;&gt; athena.create_ctas_table(\n&gt;&gt;&gt;            database='my_database', \n&gt;&gt;&gt;            query=query,\n&gt;&gt;&gt;            ctas_table='my_ctas_table',\n&gt;&gt;&gt;            wait=True,\n&gt;&gt;&gt;            storage_format='PARQUET',\n&gt;&gt;&gt;            write_compression='snappy',\n&gt;&gt;&gt;            partition_info=['date']\n&gt;&gt;&gt;        )\n</code></pre>"},{"location":"athena_client/#src.athena.Athena.create_database","title":"<code>create_database(database, **kwargs)</code>","text":"<p>Create a database in Athena.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>str</code> <p>The name of the database to create.</p> required <code>**kwargs</code> <code>Dict[str, Any]</code> <p>Additional arguments passed to awswrangler.athena.start_query_execution.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; athena.create_database(database='my_database', wait=True) # See awswrangler.athena.start_query_execution for additional arguments\n</code></pre>"},{"location":"athena_client/#src.athena.Athena.create_table","title":"<code>create_table(database, query, **kwargs)</code>","text":"<p>Create a table in Athena.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>str</code> <p>The name of the database to create the table in.</p> required <code>query</code> <code>str</code> <p>The query to create the table.</p> required <code>**kwargs</code> <code>Dict[str, Any]</code> <p>Additional arguments passed to awswrangler.athena.start_query_execution.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ddl = '''\n&gt;&gt;&gt;       CREATE EXTERNAL TABLE IF NOT EXISTS my_database.my_table (\n&gt;&gt;&gt;           id CHAR(1),\n&gt;&gt;&gt;           date TIMESTAMP\n&gt;&gt;&gt;       )\n&gt;&gt;&gt;       STORED AS PARQUET\n&gt;&gt;&gt;       LOCATION 's3://bucket-name/path/to/data/'\n&gt;&gt;&gt;       TBLPROPERTIES ('parquet.compress'='SNAPPY');\n&gt;&gt;&gt;       '''\n&gt;&gt;&gt; athena.create_table(database='my_database', query=ddl, wait=True)\n</code></pre>"},{"location":"athena_client/#src.athena.Athena.create_view","title":"<code>create_view(database, query, **kwargs)</code>","text":"<p>Create a view in Athena.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The query to create the view.</p> required <code>**kwargs</code> <code>Dict[str, Any]</code> <p>Additional arguments passed to awswrangler.athena.start_query_execution.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ddl = '''\n&gt;&gt;&gt;       CREATE OR REPLACE VIEW my_database.my_view AS\n&gt;&gt;&gt;       SELECT * FROM my_database.my_table;\n&gt;&gt;&gt;       '''\n&gt;&gt;&gt; athena.create_view(database='my_database', query=ddl, wait=True)\n</code></pre>"},{"location":"athena_client/#src.athena.Athena.drop_database","title":"<code>drop_database(database, **kwargs)</code>","text":"<p>Drop a database in Athena.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>str</code> <p>The name of the database to drop.</p> required <code>**kwargs</code> <code>Dict[str, Any]</code> <p>Additional arguments passed to awswrangler.athena.start_query_execution.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; athena.drop_database(database='my_database', wait=True)\n</code></pre>"},{"location":"athena_client/#src.athena.Athena.drop_table","title":"<code>drop_table(database, table, **kwargs)</code>","text":"<p>Drop a table in Athena in the specified database.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>str</code> <p>The name of the database to drop the table from.</p> required <code>table</code> <code>str</code> <p>The name of the table to drop.</p> required <code>**kwargs</code> <code>Dict[str, Any]</code> <p>Additional arguments passed to awswrangler.athena.start_query_execution.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; athena.drop_table(database='my_database', table='my_table', wait=True)\n</code></pre>"},{"location":"athena_client/#src.athena.Athena.drop_view","title":"<code>drop_view(database, view, **kwargs)</code>","text":"<p>Drop a view in Athena in the specified database.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>str</code> <p>The name of the database to drop the view from.</p> required <code>view</code> <code>str</code> <p>The name of the view to drop.</p> required <code>**kwargs</code> <code>Dict[str, Any]</code> <p>Additional arguments passed to awswrangler.athena.start_query_execution.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; athena.drop_view(database='my_database', view='my_view', wait=True)\n</code></pre>"},{"location":"athena_client/#src.athena.Athena.query","title":"<code>query(database, query, ctas_approach=False, **kwargs)</code>","text":"<p>Execute a query in Athena.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>str</code> <p>The name of the database to start the query in; the query can reference other databases.</p> required <code>query</code> <code>str</code> <p>The query to execute.</p> required <code>ctas_approach</code> <code>bool</code> <p>Use the Create Table As Select (CTAS) approach to execute the query.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed to awswrangler.athena.read_sql_query.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The result of the query.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; query = '''\n&gt;&gt;&gt;         SELECT * FROM my_database.my_table\n&gt;&gt;&gt;         WHERE date &gt;= DATE '2021-01-01';\n&gt;&gt;&gt;         '''\n&gt;&gt;&gt; athena.query(database='my_database', query=query, ctas_approach=False)\n</code></pre>"},{"location":"utils/","title":"Utils","text":"<p>Create a boto3 session with the provided profile name. If an AWS role ARN is provided, the session will assume the role. There are two options for providing  credentials:</p> <ol> <li> <p>Provide the profile name containing AWS credentials stored in the ~/.aws/credentials file     (e.g., access key ID, secret access key, or session token). These credentials must belong     to a principal (e.g., an IAM user) that has the necessary permissions to interact with the     AWS services required by the application.</p> </li> <li> <p>Provide the AWS role ARN, in addition to the profile name, to assume, which grants the necessary     permissions to interact with AWS services. If a role ARN is provided, the profile's associated     principal (e.g., an IAM user) must at least have the <code>sts:AssumeRole</code> permission. Additionally,     the role to be assumed must have a trust relationship with the principal that uses the profile's     credentials.</p> </li> </ol> <p>Parameters:</p> Name Type Description Default <code>profile_name</code> <code>str</code> <p>The AWS profile name to use.</p> required <code>role_arn</code> <code>Optional[str]</code> <p>The AWS role ARN to assume. The default is None.</p> <code>None</code> <code>duration_seconds</code> <code>Optional[int]</code> <p>The duration in seconds for which the credentials will be valid. The default is 3600 seconds (1 hour).</p> <code>3600</code> <p>Returns:</p> Type Description <code>Session</code> <p>A boto3 session</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from utils import create_session\n&gt;&gt;&gt; boto3_session = create_session(profile_name='my-profile', role_arn='arn:aws:iam::123456789012:role/my-role')\n</code></pre>"}]}